title: What happens behind execution of an `import` statement?
start: 2020-09-05 11:00:00+09:30
end: 2020-09-05 11:25:00+09:30
room: 1
track:
type: P
abstract: "<p>Very often we in our daily usage of Python, we face errors related to\
  \ $PATH, $PYTHONPATH, or other import related errors. A clear understanding of the\
  \ import system helps us to fix these errors properly, and build extensions on top\
  \ of the import system.</p>\n<p>This talk follows <a href=\"https://github.com/alex/what-happens-when\"\
  >this</a> template to explain what goes on in the background when you execute <code>from\
  \ spam import ham</code>, or any other import statement. Additionally, it discusses\
  \ <strong>import hooks</strong>(PEP-302) and how to use them.</p>"
description: "<h3>Introduction</h3>\n<p>Every Python script involves import statements.\
  \ And if you develop software with Python, you might already have come across import\
  \ and path related errors like ImportError, ModuleNotFoundError, etc.</p>\n<p>It's\
  \ important to know the import mechanics, both for general knowledge, and to develop\
  \ custom plugins to tweak the import system. In this talk, we'd discuss in detail\
  \ about how the import system works, its components and what tasks they perform\
  \ respectively.</p>\n<h3>Who should attend this talk?</h3>\n<p>This talk is most\
  \ suitable for beginner to intermediate level Pythonistas.</p>\n<h3>How does the\
  \ talk proceed?</h3>\n<ul>\n<li>The talk starts with packages in Python, and how\
  \ to organize Python files in order to make them distributable, and importable.</li>\n\
  <li>It proceeds to discuss about $PATH and $PYTHONPATH, and how they are used to\
  \ enable system-wide imports, and how capable are Python's path based import handlers,\
  \ if they let a programmer import from remote URIs, etc.</li>\n<li>Different types\
  \ of packages such as regular packages, namespace packages, frozen modules, etc.\
  \ are discussed.</li>\n<li>\n<p>After that, some key components are introduced i.e\
  \ sys.modules and how modules are refreshed and regulated in runtime, what finders\
  \ and loaders are, and what 'import protocol' is, sys.meta_path, sys.path_hooks.</p>\n\
  </li>\n<li>\n<p>The talk then goes in detail about finders, the default finders\
  \ in Python, spec object, and its functioning.\nAfter finders, loaders are discussed\
  \ with sample code, explaining the steps involved from processing a spec, and creating,\
  \ executing, and loading a module to sys.modules.</p>\n</li>\n<li>After finders\
  \ and loaders, 'import hooks' are discussed i.e how Python allows injection of custom\
  \ components to handle a pre-defined import statement.</li>\n<li>This follows a\
  \ demonstration of import hooks, implementation of a meta_path finder Class which\
  \ protects importing of modules from an http server with a token exchange. (So the\
  \ source code is protected, and it can be logged who requested the source code by\
  \ a signature to act against misuse.)</li>\n<li>The demonstration is followed by\
  \ listing some important use cases of import hooks, and how folks have used it in\
  \ the past.</li>\n</ul>\n<h3>What can someone get out of this talk?</h3>\n<p>An\
  \ understanding of the import system's mechanics, which helps to quickly debug and\
  \ fix path/import related errors.\nKnowledge of import hooks, to build custom import\
  \ related plugins.</p>\n<h3>Outline</h3>\n<p>Time Duration - Topic</p>\n<p>0 - 4\
  \ Introduction to packages and how to organize packages</p>\n<p>4 - 7 Types of packages\
  \ in python, and the default ones the import system supports.</p>\n<p>7 - 12 Components\
  \ of import system - sys.modules - finders and loaders - chronology of import related\
  \ tasks</p>\n<p>12 - 15 Finders, examples of finders, and how they function, find_spec\
  \ function</p>\n<p>15 - 17 sys.meta_path, sys.path_hooks in detail</p>\n<p>17 -\
  \ 19 Introduction to PEP 302, and import hooks</p>\n<p>19 - 22 explain loaders with\
  \ template code</p>\n<p>23 - 25 code walkthrough and demonstration of an implementation\
  \ of import hooks</p>\n<p>25 - 26 briefly cover 'importing of submodules' topic\
  \ with an example</p>\n<p>26 - 28 present use-cases of import hooks, and usage in\
  \ industry, conclude.</p>\n<p>28 - 30 Q&amp;A</p>\n<h3>Prerequisites:</h3>\n<ul>\n\
  <li>Syntactic knowledge of Python</li>\n<li>Should have come across import/$PYTHONPATH\
  \ related errors</li>\n</ul>\n<p>If you don't know either and still like the talk\
  \ idea, please follow <a href=\"https://gist.github.com/plant99/9fee5dbe73f25d4da9c7fb956a36b889\"\
  >this gist</a> to 'intentionally' come across the errors :)</p>\n<h2>Content URLs</h2>\n\
  <p><a href=\"https://speakerdeck.com/plant99/wip-what-happens-behind-execution-of-an-import-statement\"\
  >WIP slides</a></p>\n<p><a href=\"https://plant99.bitbucket.io/pages/blogs/ten.html\"\
  >Longer description of the talk idea as blogpost</a></p>"
code: Q7GJNZ
speakers:
- SJ3KCD
cw:
youtube_slug: WrWxThyEl9Y
